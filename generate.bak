#!/usr/bin/env node

// Author: Jamie Miller              
// Organization: Drawing on Humanity 
// Date: September 4, 2025           
//License: Copyrighted Material
//	   Â©2025 - Jamie Miller
//         All Rights Reserved

import chalk from 'chalk';
import clipboard from 'clipboardy';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const success = chalk.bold.green;
const info = chalk.bold.cyan;
const error = chalk.bold.red;
const highlight = chalk.bold.yellow;

const validFlags = ["-l", "-n", "-s", "-ln", "-ls", "-ns"]

// Character sets
const letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
const numbers = '0123456789';
const specials = '!$&()-_=+[]|:.<>?/';
let charset = [letters,numbers,specials];

const gradeMap = [
  [60, "F - WEAK"],
  [70, "D - WEAK"],
  [80, "C - MODERATE"],
  [90, "B - MODERATE"],
  [100, "A - STRONG"],
  [Infinity, "A+ - VERY STRONG"]
];


const args = process.argv.slice(2);
const command = args[0];
const length = parseInt(args[1], 10);
const flags = args.slice(2);

//Check command for excess flags
const selectedFlags = flags.filter(f => validFlags.includes(f));
if (selectedFlags.length > 1) {
  console.log(error("FLAG LIMIT ERROR:  Command is limited to use of only 1 flag.\nValid flags are:",validFlags.join(", ")));
  process.exit(1);
}

const flag = selectedFlags[0];



function generatePassword(length) {
  let password = '';
  let activeSet = [...charset];
  if(flag) {
   updateCharset(activeSet);
  }
  let characterSetString = activeSet.join('');
  for (let i = 0; i < length; i++) {
    const randomIndex = Math.floor(Math.random() * characterSetString.length);
    password += characterSetString[randomIndex];
  }
  return password;
}

function updateCharset(set) {
  if(!flag.includes("l")) set.splice(charset.indexOf(letters),1);
  if(!flag.includes("n")) set.splice(charset.indexOf(numbers),1);
  if(!flag.includes("s")) set.splice(charset.indexOf(specials),1);
}

function scorePassword(length){
  let e = Math.round(Math.log2(charset.join('').length)*length);
  let s = Math.round((e/125) * 100);
  let g = gradeMap.find(([threshold]) => s < threshold)[1];
  return {entropy: e, grade: g}
}

//Process --help flag
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

if (args.includes('--help')) {
  try {
    const readmePath = path.join(__dirname, 'help.txt');
    const helpText = fs.readFileSync(readmePath, 'utf8');
    console.log(helpText);
  } catch (err) {
    console.log(error('FILE READ ERROR. Error reading help.txt:'));
  }
  process.exit(0);
}

// Command handling
if (command === 'pw' && !isNaN(length)) {

  const password = generatePassword(length);
  const rate = scorePassword(length);

  console.log(info(`Generating ${length} character password.`));
  console.log(success(`Generated Password: ${password}`));
  console.log(highlight(`Password Strength: ${rate.entropy} ${rate.grade}`));
  clipboard.writeSync(password);
  console.log(highlight(`Password copied to clipboard!`));
} else {
  if (command === "pw") {
    console.log(error(`PASSWORD LENGTH ERROR: generate pw ${highlight('<length>')} [ ${validFlags} ]`));
  } else {
    console.log(error(`COMMAND ERROR: generate ${highlight("pw")} <length> [ ${validFlags} ]`));
  }
}